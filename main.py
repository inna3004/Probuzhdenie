import os
import logging
from pathlib import Path
import threading
import time
from datetime import datetime, timedelta
import telebot
from telebot import types
from yookassa import Payment
from service.config import MAX_LEVEL
from admin.storage.admin_repository import AdminRepository
from payments.pay import create_payment, create_charity_payment
from service.repository import (
    UserRepository,
    UserDataRepository,
    LevelRepository,
    TaskRepository,
    ReferralRepository,
    DonationRepository
)
from service.states import BotStates
from settings import BOT_TOKEN
from storage.migrator import Migrator
from storage.postgres_storage import PostgresStorage
from logging.handlers import RotatingFileHandler

bot = telebot.TeleBot(BOT_TOKEN, threaded=True, num_threads=5)

Path("logs").mkdir(exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        RotatingFileHandler(
            filename='logs/bot.log',
            maxBytes=5 * 1024 * 1024,
            backupCount=3,
            encoding='utf-8'
        )
    ]
)

logger = logging.getLogger(__name__)

storage = PostgresStorage(
    dbname='probuzhdenie',
    user='postgres',
    password='5g',
    host='localhost',
    port='5433'
)

migrator = Migrator(storage)
migrator.migrate()

user_repo = UserRepository(storage)
user_data_repo = UserDataRepository(storage)
level_repo = LevelRepository(storage)
task_repo = TaskRepository(storage)
referral_repo = ReferralRepository(storage)
donation_repo = DonationRepository(storage)
admin_repo = AdminRepository(storage)
TASK_DURATION = timedelta(hours=24)


def create_main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"))
    keyboard.add(types.KeyboardButton("–û –±–æ—Ç–µ"))
    return keyboard


def create_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    return keyboard


def create_level_navigation_keyboard(current_level, user_id=None, task_repo=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º —Å –∫–Ω–æ–ø–∫–æ–π '–î–∞–ª–µ–µ'"""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    logger.info(f"[Keyboard] Creating navigation for level {current_level}")

    if current_level > 1:
        keyboard.add(types.KeyboardButton(f"{current_level - 1} —É—Ä–æ–≤–µ–Ω—å"))
        logger.info(f"[Keyboard] Added previous level button: {current_level - 1}")

    if current_level == 1:
        keyboard.add(types.KeyboardButton("–î–∞–ª–µ–µ"))
        logger.info("[Keyboard] Added simple '–î–∞–ª–µ–µ' button for level 1")

    elif current_level >= 21:
        keyboard.add(types.KeyboardButton("–î–∞–ª–µ–µ"))
        logger.info("[Keyboard] Added special '–î–∞–ª–µ–µ' button for final level")

    else:
        if task_repo is not None and user_id is not None:
            is_completed = task_repo.is_task_completed(user_id, current_level)
            logger.info(f"[Keyboard] Task completion check: {is_completed}")

            if is_completed:
                if current_level <= 20:
                    keyboard.add(types.KeyboardButton(f"{current_level + 1} —É—Ä–æ–≤–µ–Ω—å"))
                    logger.info(f"[Keyboard] Added next level button: {current_level + 1}")

        keyboard.add(types.KeyboardButton("–î–∞–ª–µ–µ, –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é."))
        logger.info("[Keyboard] Added main '–î–∞–ª–µ–µ' button with text")

    if 2 <= current_level <= 21:
        keyboard.add(types.KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –¥–ª—è —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã:3-21"))
        logger.info("[Keyboard] Added special rules button")

    return keyboard


@bot.message_handler(func=lambda message: message.text == "–î–∞–ª–µ–µ")
def handle_next_button(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ' —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    try:
        user_id = message.from_user.id
        user = user_repo.get_user(user_id)
        current_level = user.get('current_level', 1)
        viewed_level = user_data_repo.get_viewed_level(user_id)

        logger.info(f"[Next Button] User {user_id} pressed '–î–∞–ª–µ–µ'. Current: {current_level}, Viewed: {viewed_level}")

        if viewed_level == 1:
            logger.info("[Next Button] Processing level 1 transition")
            task_repo.create_task(
                user_id=user_id,
                level=1,
                task_type='auto',
                start_time=datetime.now(),
                end_time=datetime.now(),
                completed=True
            )
            user_repo.update_user_level(user_id, 2)
            return show_level_content(message, 2)

        if viewed_level < current_level:
            logger.info(f"[Next Button] Viewing past level {viewed_level}, moving to {viewed_level + 1}")
            return show_level_content(message, viewed_level + 1)

        if viewed_level >= MAX_LEVEL:
            logger.info("[Next Button] Reached max level")
            return show_final_level_message(message)

        if not task_repo.is_task_completed(user_id, viewed_level):
            logger.info("[Next Button] Task not completed, showing selection")
            return show_task_selection(message)

        next_level = viewed_level + 1
        logger.info(f"[Next Button] Moving from {viewed_level} to {next_level}")

        if not user_repo.update_user_level(user_id, next_level):
            logger.error("[Next Button] Failed to update user level")
            return bot.reply_to(message, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è")

        show_level_content(message, next_level)

    except Exception as e:
        logger.error(f"[Next Button] Error: {str(e)}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.FINAL_LEVEL)
def handle_community_link(message):
    try:
        bot.send_message(
            message.chat.id,
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É:\n"
            "https://t.me/your_community_link",  # –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é —Å—Å—ã–ª–∫—É
            disable_web_page_preview=True
        )

        back_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back_keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(
            message.chat.id,
            "–ü–æ—Å–ª–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
            reply_markup=back_keyboard
        )

    except Exception as e:
        logger.error(f"Error in handle_community_link: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def show_final_level_message(message):
    try:
        final_text = (
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ 21 —É—Ä–æ–≤–µ–Ω—å –±–æ—Ç–∞ '–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ'!\n\n"
            "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –≤—ã—Å—à–µ–π —Å—Ç—É–ø–µ–Ω–∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –∑–∞–∫—Ä—ã—Ç–æ–º—É —Å–æ–æ–±—â–µ—Å—Ç–≤—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è\n"
            "2. –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–º –≤–∑–Ω–æ—Å–æ–º\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –∏ –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–µ!"
        )

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ"),
                     types.KeyboardButton("–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                     )

        bot.send_message(
            message.chat.id,
            final_text,
            reply_markup=keyboard
        )
        user_repo.set_user_state(message.from_user.id, BotStates.FINAL_LEVEL)

    except Exception as e:
        logger.error(f"Error in show_final_level_message: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def show_level_content(message, level_number):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–≤–Ω—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    try:
        user_id = message.from_user.id
        user_data_repo.set_viewed_level(user_id, level_number)
        user = user_repo.get_user(user_id)

        if user and user.get('current_level') < level_number:
            logger.warning(
                f"User {user_id} trying to view level {level_number} beyond current {user.get('current_level')}")
            level_number = user.get('current_level')

        level_content = level_repo.get_level_content(level_number)
        level_rules = level_repo.get_level_rules(level_number)

        logger.info(f"[Level {level_number}] Content length: {len(level_content) if level_content else 0}")
        logger.info(f"[Level {level_number}] Rules content: {level_rules[:50] + '...' if level_rules else 'None'}")

        if not level_content:
            logger.warning(f"[Level {level_number}] No content found")
            bot.send_message(message.chat.id, "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return


        if level_number == 1:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(
                types.KeyboardButton("–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"),
                types.KeyboardButton("–î–∞–ª–µ–µ")
            )
        else:
            keyboard = create_level_navigation_keyboard(
                level_number,
                user_id=user_id,
                task_repo=task_repo
            )

        bot.send_message(message.chat.id, level_content, reply_markup=keyboard)

        if level_rules and level_rules.startswith("image:"):
            try:
                import os
                from pathlib import Path

                image_relative = level_rules.replace("image:", "").strip()

                possible_paths = [
                    Path(r"C:\projects\1bot_probuzhdenie\static\levels"),
                    Path(r"C:\1bot_probuzhdenie\static\levels"),
                    Path(r"C:\static\levels"),
                    Path(r"C:\app\static\levels"),

                    Path("/var/www/1bot_probuzhdenie/static/levels"),
                    Path("/app/static/levels"),

                    Path(__file__).resolve().parent.parent.parent / "1bot_probuzhdenie" / "static" / "levels",
                    Path(__file__).resolve().parent.parent / "static" / "levels",
                ]

                checked_paths = []
                for path in possible_paths:
                    try:
                        path = path.resolve()
                        if path not in checked_paths and path.exists():
                            checked_paths.append(path)
                    except Exception:
                        continue

                logger.info(f"[Level {level_number}] Checking image paths:\n" +
                            "\n".join(f" - {p}" for p in checked_paths))

                static_levels_dir = None
                for path in checked_paths:
                    if (path / image_relative).exists() or any(path.glob(image_relative + ".*")):
                        static_levels_dir = path
                        break

                if not static_levels_dir:
                    logger.error(f"[Level {level_number}] No valid images directory found")
                    logger.info(f"[Level {level_number}] Checked paths:\n" +
                                "\n".join(f" - {p}" for p in checked_paths))
                    raise FileNotFoundError("No valid images directory found")

                logger.info(f"[Level {level_number}] Using images dir: {static_levels_dir}")

                image_path = None
                extensions = ['', '.jpg', '.jpeg', '.png', '.gif']

                for ext in extensions:
                    test_path = static_levels_dir / f"{image_relative}{ext}"
                    if test_path.exists():
                        image_path = test_path
                        break

                if not image_path:
                    logger.error(
                        f"[Level {level_number}] Image not found. Tried: {image_relative} with extensions {extensions}")
                    logger.info(f"[Level {level_number}] Available files:\n" +
                                "\n".join(f" - {f.name}" for f in static_levels_dir.glob('*')))
                    raise FileNotFoundError("Image file not found")

                with open(image_path, 'rb') as photo:
                    bot.send_photo(
                        message.chat.id,
                        photo,
                        reply_markup=keyboard
                    )
                    logger.info(f"[Level {level_number}] Image successfully sent: {image_path}")

            except Exception as e:
                logger.error(f"[Level {level_number}] Error processing image: {str(e)}")

        user_repo.set_user_state(user_id, BotStates.LEVEL_CONTENT)
        logger.info(f"[Level {level_number}] User state set to LEVEL_CONTENT")

    except Exception as e:
        logger.error(f"[Level {level_number}] Error in show_level_content: {str(e)}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(commands=['admin'])
def handle_admin_command(message):
    try:
        user_id = message.from_user.id
        logger.info(f"Admin command received from {user_id}")

        if not admin_repo.is_admin(user_id):
            bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        active_users = admin_repo.get_active_users_count()
        good_deeds = admin_repo.get_completed_good_deeds_count()
        level_stats = admin_repo.get_level_statistics()
        donation_stats = admin_repo.get_donation_statistics()
        referral_stats = admin_repo.get_referral_statistics()

        stats_message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
            f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–æ–±—Ä—ã—Ö –¥–µ–ª: {good_deeds}\n\n"
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º:\n"
        )

        for level, count in sorted(level_stats.items()):
            stats_message += f"  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å {level}: {count} —á–µ–ª.\n"

        stats_message += (
            f"\nüí∏ –î–æ–Ω–∞—Ç—ã: {donation_stats['total_count']} –Ω–∞ —Å—É–º–º—É "
            f"{donation_stats['total_amount']:.2f} —Ä—É–±.\n"
            f"\nüë• –†–µ—Ñ–µ—Ä–∞–ª—ã:\n"
            f"  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {referral_stats['total_referrals']}\n"
            f"  ‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {referral_stats['completed_referrals']}\n"
            f"  ‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {referral_stats['pending_referrals']}"
        )

        bot.reply_to(message, stats_message)

    except Exception as e:
        logger.error(f"Error in admin command: {e}")
        bot.reply_to(message, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –¥–ª—è —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã:3-21" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.LEVEL_CONTENT)
def handle_level_rules(message):
    try:
        rules_text = (
            "–ü—Ä–∞–≤–∏–ª–∞ –ø–ª–∞—Ç–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π:\n\n"
            "–ù–∞–¥–æ –¥–µ–ª–∞—Ç—å –¥–æ–±—Ä—ã–µ –¥–µ–ª–∞ –ª–∏–±–æ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∏—Ö –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–Ω—å–≥–∞–º–∏, "
            "—Ç–µ–º —Å–∞–º—ã–º –í—Å–µ–ª–µ–Ω–Ω–∞—è —Å–æ–±–ª—é–¥–∞–µ—Ç –±–∞–ª–∞–Ω—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏—è –¥—É—Ö–∞ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ."
        )

        bot.send_message(
            message.chat.id,
            rules_text,
            reply_markup=create_back_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in handle_level_rules: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def validate_name(name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏"""
    if not name or not name.strip():
        return False
    return name.isalpha()


def validate_birthdate(date_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except ValueError:
        return False


@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        user_id = message.from_user.id
        referrer_id = None
        level = 1

        if len(message.text.split()) > 1 and message.text.split()[1].startswith('ref'):
            try:
                ref_part = message.text.split()[1][3:]

                if "_" in ref_part:
                    referrer_id = int(ref_part.split("_")[0])
                    level = int(ref_part.split("_")[1])
                else:
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {message.text}")
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏")

                logger.info(f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: referrer_id={referrer_id}, level={level}")

                if referrer_id == user_id:
                    logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–µ–±—è")
                else:
                    existing_user = user_repo.get_user(user_id)
                    if existing_user and existing_user.get('registration_complete'):
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                    else:
                        referrer = user_repo.get_user(referrer_id)
                        if referrer and level > referrer.get('current_level', 1):
                            logger.warning(
                                f"–£—Ä–æ–≤–µ–Ω—å {level} –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer.get('current_level', 1)}")
                            bot.send_message(user_id, "‚ùå –£—Ä–æ–≤–µ–Ω—å –≤ —Å—Å—ã–ª–∫–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                            return
                        else:
                            user_repo.create_user(user_id)
                            if not referral_repo.create_referral(referrer_id, user_id, level):
                                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∑–∞–ø–∏—Å–∏")

            except (ValueError, IndexError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")

        user_repo.create_user(user_id)
        user = user_repo.get_user(user_id)

        if user and user.get('registration_complete'):
            show_main_menu(message)
        else:
            bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
                reply_markup=types.ReplyKeyboardMarkup(
                    resize_keyboard=True,
                    one_time_keyboard=True
                ).add(types.KeyboardButton("–†—É—Å—Å–∫–∏–π"))
            )
            user_repo.set_user_state(user_id, BotStates.LANGUAGE_SELECTION)
    except Exception as e:
        logger.error(f"Error in handle_start: {e}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message:
user_repo.get_user_state(message.from_user.id) == BotStates.LANGUAGE_SELECTION)
def handle_language_selection(message):
    try:
        user_id = message.from_user.id
        logger.info(f"Language selection by user {user_id}: {message.text}")

        if message.text.lower() in ['—Ä—É—Å—Å–∫–∏–π', 'russian']:
            logger.info(f"Russian selected by {user_id}")

            if not user_data_repo.save_user_data(user_id=user_id, language='ru'):
                logger.error(f"Failed to save language for {user_id}")
                raise Exception("Language save failed")

            logger.info(f"Language saved for {user_id}")

            bot.send_message(
                message.chat.id,
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ '–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ'!",
                reply_markup=create_main_menu_keyboard()
            )
            user_repo.set_user_state(user_id, BotStates.MAIN_MENU)
            logger.info(f"User {user_id} state set to MAIN_MENU")

        else:
            bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            )
    except Exception as e:
        logger.error(f"Error in handle_language_selection for user {message.from_user.id}: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–û –±–æ—Ç–µ" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.MAIN_MENU)
def handle_about(message):
    try:
        about_text = (
            "–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ ¬´–°–æ–∑–¥–∞—Ç–µ–ª–∏¬ª, "
            "—Ü–µ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ ‚Äì —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞,"
            " –≤ —Å–ª–µ–¥—Å—Ç–≤–∏–∏ —á–µ–≥–æ ‚Äì —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä –ª—É—á—à–µ."
        )

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text="–°–æ–æ–±—â–µ—Å—Ç–≤–æ '–°–æ–∑–¥–∞—Ç–µ–ª–∏'",
            url="https://example.com/community"
        ))

        bot.send_message(
            message.chat.id,
            about_text,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in handle_about: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.MAIN_MENU)
def handle_rules(message):
    logger.info(f"RAW MESSAGE CONTENT: {repr(message.text)}")
    user_id = message.from_user.id
    db_state = user_repo.get_user_state(user_id)
    expected_state = BotStates.MAIN_MENU
    logger.info(
        f"CRITICAL CHECK: db_state={db_state}, expected={expected_state}, types: {type(db_state)}/{type(expected_state)}")

    if db_state != expected_state:
        logger.error(f"STATE MISMATCH! Database returns: {db_state}")
        user = user_repo.get_user(user_id)
        logger.error(f"Full user data: {user}")
    if str(user_repo.get_user_state(message.from_user.id)) != str(BotStates.MAIN_MENU):
        logger.error("State validation failed!")
        return
    try:
        logger.info(f"Rules handler triggered for user {message.from_user.id}")

        rules_text = (
            "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n\n"
            "–°–æ–≤–µ—Ä—à–∞—Ç—å –æ–¥–Ω–æ –¥–æ–±—Ä–æ–µ –¥–µ–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 21-–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–∑–∞–¥–∞–Ω–∏—è), —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –¥–µ–ª–∞—Ç—å –¥–æ–±—Ä–æ."
            "–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç ‚Äú–¥–æ–±—Ä—ã–µ –æ—á–∫–∏‚Äù, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏"
        )

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

        user = user_repo.get_user(message.from_user.id)
        logger.info(f"User registration status: {user.get('registration_complete') if user else 'User not found'}")

        if user and user.get('registration_complete'):
            keyboard.add(types.KeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
        else:
            keyboard.add(types.KeyboardButton("–ü—Ä–∏–Ω—è—Ç—å"))

        keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        logger.info("Sending rules message with keyboard")
        bot.send_message(
            message.chat.id,
            rules_text,
            reply_markup=keyboard
        )
        logger.info("Rules message sent successfully")

    except Exception as e:
        logger.error(f"Error in handle_rules: {str(e)}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def start_registration(message):
    try:
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        user_repo.set_user_state(message.from_user.id, BotStates.REGISTRATION_NAME)
    except Exception as e:
        logger.error(f"Error in start_registration: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∏–Ω—è—Ç—å" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.MAIN_MENU)
def handle_accept_rules(message):
    try:
        user_id = message.from_user.id
        logger.info(f"User {user_id} accepted the rules, starting registration")

        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∞–≤–∏–ª! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=types.ReplyKeyboardRemove()
        )

        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=types.ReplyKeyboardRemove()
        )

        user_repo.set_user_state(user_id, BotStates.REGISTRATION_NAME)

    except Exception as e:
        logger.error(f"Error in handle_accept_rules: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message:
user_repo.get_user_state(message.from_user.id) == BotStates.REGISTRATION_NAME)
def process_name_step(message):
    try:
        if not validate_name(message.text):
            bot.send_message(
                message.chat.id,
                "–î–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è:"
            )
            return

        user_data_repo.save_user_data(
            user_id=message.from_user.id,
            name=message.text
        )

        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):"
        )
        user_repo.set_user_state(message.from_user.id, BotStates.REGISTRATION_BIRTHDATE)
    except Exception as e:
        logger.error(f"Error in process_name_step: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message:
user_repo.get_user_state(message.from_user.id) == BotStates.REGISTRATION_BIRTHDATE)
def process_birthdate_step(message):
    try:
        if not validate_birthdate(message.text):
            bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì):"
            )
            return

        user_data_repo.save_user_data(
            user_id=message.from_user.id,
            birthdate=message.text
        )

        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:"
        )
        user_repo.set_user_state(message.from_user.id, BotStates.REGISTRATION_LOCATION)
    except Exception as e:
        logger.error(f"Error in process_birthdate_step: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message:
user_repo.get_user_state(message.from_user.id) == BotStates.REGISTRATION_LOCATION)
def process_location_step(message):
    try:
        if not message.text or not message.text.strip():
            bot.send_message(
                message.chat.id,
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:"
            )
            return

        user_data_repo.save_user_data(
            user_id=message.from_user.id,
            location=message.text
        )

        user_repo.complete_registration(message.from_user.id)

        bot.send_message(
            message.chat.id,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=types.ReplyKeyboardMarkup(
                resize_keyboard=True
            ).add(types.KeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")))

        user_repo.set_user_state(message.from_user.id, BotStates.MAIN_MENU)
    except Exception as e:
        logger.error(f"Error in process_location_step: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.MAIN_MENU)
def start_game(message):
    try:
        user = user_repo.get_user(message.from_user.id)
        current_level = user.get('current_level', 1)

        show_level_content(message, current_level)
    except Exception as e:
        logger.error(f"Error in start_game: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.LEVEL_CONTENT)
def show_faq(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã' —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å"""
    try:
        user_id = message.from_user.id
        logger.info(f"User {user_id} opened FAQ")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç FAQ
        faq_text = """
<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>

1. <i>–ß—Ç–æ —Ç–∞–∫–æ–µ –¥—É—à–∞ —á–µ–ª–æ–≤–µ–∫–∞?</i>
–î—É—à–∞ ‚Äî –Ω–µ–º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è —Å—É—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–∑–Ω–∞–Ω–∏—è –∏ –ª–∏—á–Ω–æ—Å—Ç–∏.

2. <i>–°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥—É—à–∞ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏?</i>
–≠—Ç–æ –≤–æ–ø—Ä–æ—Å –≤–µ—Ä—ã –∏ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏—è.

3. <i>–ú–æ–∂–Ω–æ –ª–∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –¥—É—à—É?</i>
–ú–Ω–æ–≥–∏–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç –æ—â—É—â–µ–Ω–∏–µ –¥—É—à–µ–≤–Ω–æ–π —Ç–µ–ø–ª–æ—Ç—ã –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≥–æ–ª–æ—Å–∞.

4. <i>–û—Ç–∫—É–¥–∞ –±–µ—Ä—ë—Ç—Å—è –¥—É—à–∞?</i>
–ù–∞—É–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å, —Ä–µ–ª–∏–≥–∏–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–æ—Ä–∏–∏.

5. <i>–ö–∞–∫ –æ—á–∏—Å—Ç–∏—Ç—å –¥—É—à—É?</i>
–î–æ–±—Ä—ã–µ –¥–µ–ª–∞, –º–µ–¥–∏—Ç–∞—Ü–∏—è –∏ –¥—É—Ö–æ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–º–æ–≥–∞—é—Ç –¥—É—à–µ.
"""

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(
            message.chat.id,
            faq_text,
            parse_mode='HTML',
            reply_markup=keyboard
        )

        user_repo.set_user_state(user_id, BotStates.FAQ)
        logger.info(f"User {user_id} state set to FAQ")

    except Exception as e:
        logger.error(f"FAQ error for user {user_id}: {str(e)}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FAQ",
            reply_markup=create_back_keyboard()
        )


@bot.message_handler(func=lambda message: message.text == "–î–∞–ª–µ–µ, –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é." and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.LEVEL_CONTENT)
def handle_next_level_request(message):
    try:
        user_id = message.from_user.id
        user = user_repo.get_user(user_id)
        current_level = user.get('current_level', 1)

        if current_level >= MAX_LEVEL:
            logger.info(f"User {user_id} reached max level {MAX_LEVEL}, showing final message")
            return show_final_level_message(message)

        is_completed = task_repo.is_task_completed(user_id, current_level)
        logger.info(f"[Next Level] Task completion status for level {current_level}: {is_completed}")

        if is_completed:
            next_level = current_level + 1
            if next_level <= MAX_LEVEL:
                if not user_repo.update_user_level(user_id, next_level):
                    logger.error(f"Failed to update user {user_id} level to {next_level}")
                    return bot.reply_to(message, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è")

                logger.info(f"Successfully updated user {user_id} to level {next_level}")
                show_level_content(message, next_level)
            else:
                show_final_level_message(message)
        else:
            logger.info(f"Showing task selection for user {user_id} level {current_level}")
            show_task_selection(message)

    except Exception as e:
        logger.error(f"[Next Level] Error in handle_next_level_request: {str(e)}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def show_task_selection(message):
    try:
        user_id = message.from_user.id
        user = user_repo.get_user(user_id)
        current_level = user.get('current_level', 1)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –∑–¥–µ—Å—å
        if current_level >= MAX_LEVEL:
            logger.info(f"User {user_id} at max level in task selection, redirecting to final")
            return show_final_level_message(message)

        task_text = (
            "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å, —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ª—é–±–æ–µ –∏–∑ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:"
            " –æ—Ç–¥–∞—Ç—å –≤—Ä–µ–º—è, –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–æ–Ω–∞—Ç¬ª\n\n"
        )

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(
            types.KeyboardButton("–í—Ä–µ–º—è"),
            types.KeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞"),
            types.KeyboardButton("–î–æ–Ω–∞—Ç"),
            types.KeyboardButton("–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å")
        )
        keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(
            message.chat.id,
            task_text,
            reply_markup=keyboard
        )

        user_repo.set_user_state(user_id, BotStates.TASK_SELECTION)
        logger.info(f"Set user {user_id} state to TASK_SELECTION")

    except Exception as e:
        logger.error(f"Error in show_task_selection: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–í—Ä–µ–º—è" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.TASK_SELECTION)
def handle_time_task(message):
    try:
        user = user_repo.get_user(message.from_user.id)
        current_level = user.get('current_level', 1)

        active_task = task_repo.get_active_time_task(message.from_user.id, current_level)

        if active_task:
            end_time = active_task['start_time'] + TASK_DURATION
            time_left = end_time - datetime.now()

            if time_left.total_seconds() > 0:
                hours = int(time_left.total_seconds() // 3600)
                minutes = int((time_left.total_seconds() % 3600) // 60)

                task_text = (
                    f"–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–∞—á–∞—Ç–æ. –í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç.\n\n"
                    f"–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_time.strftime('%d.%m.%Y %H:%M')}"
                )

                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                keyboard.add(types.KeyboardButton("–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"))
                keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

                bot.send_message(
                    message.chat.id,
                    task_text,
                    reply_markup=keyboard
                )

                user_repo.set_user_state(message.from_user.id, BotStates.TIME_TASK)
            else:
                task_repo.complete_task(
                    user_id=message.from_user.id,
                    level=current_level,
                    task_type='time'
                )

                bot.send_message(
                    message.chat.id,
                    "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å.",
                    reply_markup=create_level_navigation_keyboard(current_level)
                )

                user_repo.set_user_state(message.from_user.id, BotStates.LEVEL_CONTENT)
        else:
            task_text = (
                "–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É:\n\n"
                "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏–ª–∏ –¥—Ä—É–≥—É—é –ø—Ä–∞–∫—Ç–∏–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n"
                "–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ?"
            )

            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(
                types.KeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
                types.KeyboardButton("–ù–∞–∑–∞–¥")
            )

            bot.send_message(
                message.chat.id,
                task_text,
                reply_markup=keyboard
            )

            user_repo.set_user_state(message.from_user.id, BotStates.TIME_TASK)
    except Exception as e:
        logger.error(f"Error in handle_time_task: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.TIME_TASK)
def start_time_task(message):
    try:
        user = user_repo.get_user(message.from_user.id)
        current_level = user.get('current_level', 1)

        task_repo.create_task(
            user_id=message.from_user.id,
            level=current_level,
            task_type='time',
            start_time=datetime.now(),
            end_time=datetime.now() + TASK_DURATION
        )

        end_time = datetime.now() + TASK_DURATION

        task_text = (
            "–ó–∞–¥–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!\n\n"
            f"–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: 24 —á–∞—Å–∞.\n"
            f"–ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_time.strftime('%d.%m.%Y %H:%M')}"
        )

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"))
        keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(
            message.chat.id,
            task_text,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in start_time_task: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.TIME_TASK)
def complete_time_task(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
    try:
        user_id = message.from_user.id
        user = user_repo.get_user(user_id)
        current_level = user.get('current_level', 1)

        active_task = task_repo.get_active_time_task(user_id, current_level)

        if not active_task:
            bot.send_message(
                message.chat.id,
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.",
                reply_markup=create_back_keyboard()
            )
            return

        end_time = active_task['start_time'] + TASK_DURATION
        time_left = end_time - datetime.now()

        if time_left.total_seconds() > 0:
            hours = int(time_left.total_seconds() // 3600)
            minutes = int((time_left.total_seconds() % 3600) // 60)

            bot.send_message(
                message.chat.id,
                f"–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –µ—â—ë –Ω–µ –≤—ã—à–ª–æ! –û—Å—Ç–∞–ª–æ—Å—å: {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç.",
                reply_markup=create_back_keyboard()
            )
            return

        # 1. –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        task_repo.complete_task(
            user_id=user_id,
            level=current_level,
            task_type='time'
        )

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        next_level = current_level + 1
        if next_level <= MAX_LEVEL:
            user_repo.update_user_level(user_id, next_level)

            # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            level_content = level_repo.get_level_content(next_level)
            level_rules = level_repo.get_level_rules(next_level)
            keyboard = create_level_navigation_keyboard(
                next_level,
                user_id=user_id,
                task_repo=task_repo
            )

            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–≤–Ω—è
            if level_content:
                bot.send_message(
                    message.chat.id,
                    level_content,
                    reply_markup=keyboard
                )

                if level_rules and level_rules.startswith("image:"):
                    try:
                        import os
                        from pathlib import Path

                        image_relative = level_rules.replace("image:", "").strip()

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
                        possible_paths = [
                            Path(r"C:\projects\1bot_probuzhdenie\static\levels"),
                            Path(r"C:\1bot_probuzhdenie\static\levels"),
                            Path(r"C:\static\levels"),
                            Path(r"C:\app\static\levels"),
                            Path("/var/www/1bot_probuzhdenie/static/levels"),
                            Path("/app/static/levels"),
                            Path(__file__).resolve().parent.parent.parent / "1bot_probuzhdenie" / "static" / "levels",
                            Path(__file__).resolve().parent.parent / "static" / "levels",
                        ]

                        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        for path in possible_paths:
                            for ext in ['', '.jpg', '.jpeg', '.png', '.gif']:
                                image_path = path / f"{image_relative}{ext}"
                                if image_path.exists():
                                    with open(image_path, 'rb') as photo:
                                        bot.send_photo(
                                            message.chat.id,
                                            photo,
                                            reply_markup=keyboard
                                        )
                                    break
                    except Exception as e:
                        logger.error(f"[Level {next_level}] Error sending image: {str(e)}")

            # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –û—Ç–∫—Ä—ã—Ç {next_level} —É—Ä–æ–≤–µ–Ω—å",
                reply_markup=keyboard
            )
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
            show_final_level_message(message)

        user_repo.set_user_state(user_id, BotStates.LEVEL_CONTENT)

    except Exception as e:
        logger.error(f"Error in complete_time_task: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.TASK_SELECTION)
def handle_referral_task(message):
    try:
        user_id = message.from_user.id
        user = user_repo.get_user(user_id)
        current_level = user.get('current_level', 1)

        # 1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∑–∞–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if not task_repo.is_task_completed(user_id, current_level, 'referral'):
            task_created = task_repo.create_task(
                user_id=user_id,
                level=current_level,
                task_type='referral',
                start_time=datetime.now(),
                end_time=datetime.now() + timedelta(days=30),  # –ù–∞–ø—Ä–∏–º–µ—Ä, 30 –¥–Ω–µ–π –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                completed=False
            )
            if not task_created:
                logger.error(f"Failed to create referral task for user {user_id}")

        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
        referral_link = f"https://t.me/Sovmestimost_par_bot?start=ref{user_id}_{current_level}"  # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Å—Å—ã–ª–∫—É

        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n{referral_link}\n\n"
            "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–∞ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è"),
                types.KeyboardButton("–ù–∞–∑–∞–¥")
            )
        )
        user_repo.set_user_state(user_id, BotStates.REFERRAL_TASK)

    except Exception as e:
        logger.error(f"Error in handle_referral_task: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text.strip() == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è")
def handle_check_referral_status(message):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        from telebot import types  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º types –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

        user_id = message.from_user.id
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è user_id={user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = user_repo.get_user(user_id)
        if not user:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        current_level = user.get('current_level', 1)
        logger.debug(f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_level}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥" –ø—Ä—è–º–æ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        back_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        back_markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            completed_refs = referral_repo.get_completed_referrals_count(
                user_id,
                current_level
            )
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {completed_refs}")

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
            REQUIRED_REFERRALS = 1
            if completed_refs >= REQUIRED_REFERRALS:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
                if not task_repo.is_task_completed(user_id, current_level, 'referral'):
                    task_repo.create_task(
                        user_id=user_id,
                        level=current_level,
                        task_type='referral',
                        completed=True
                    )
                    logger.info(f"–ó–∞–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è {current_level} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                next_level = min(current_level + 1, MAX_LEVEL)
                user_repo.update_user_level(user_id, next_level)
                user_repo.set_user_state(user_id, BotStates.LEVEL_CONTENT)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                bot.send_message(
                    user_id,
                    f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è {current_level} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n"
                    f"üéâ –û—Ç–∫—Ä—ã—Ç —É—Ä–æ–≤–µ–Ω—å {next_level}!",
                    reply_markup=create_level_navigation_keyboard(next_level, user_id, task_repo)
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
                show_level_content(message, next_level)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                bot.send_message(
                    user_id,
                    f"‚è≥ –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–æ {completed_refs}/{REQUIRED_REFERRALS} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.",
                    reply_markup=back_markup  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–¥–µ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {str(e)}")
            bot.send_message(
                user_id,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_markup
            )

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        bot.send_message(
            user_id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.",
            reply_markup=create_main_menu_keyboard()
        )


def show_pending_referral_status(user_id, level, stats):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        response = f"""
        üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (—É—Ä–æ–≤–µ–Ω—å {level}):

        üë• –í—Å–µ–≥–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ {level} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}
        ‚úÖ –ò–∑ –Ω–∏—Ö –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {stats['completed']}
        

        –î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ,
        —á—Ç–æ–±—ã 1 —á–µ–ª–æ–≤–µ–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.
        """

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(user_id, response, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        raise


@bot.message_handler(func=lambda message: message.text == "–î–æ–Ω–∞—Ç" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.TASK_SELECTION)
def handle_donation_selection(message):
    try:
        user_id = message.from_user.id
        user = user_repo.get_user(user_id)
        current_level = user.get('current_level', 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å >= 2
        if current_level < 2:
            bot.send_message(
                message.chat.id,
                "–ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–∞–ª–µ–µ'.",
                reply_markup=create_level_navigation_keyboard(current_level, user_id, task_repo)
            )
            return

        user_repo.set_user_state(message.from_user.id, BotStates.DONATION_TASK)

        if current_level >= MAX_LEVEL:
            bot.send_message(
                message.chat.id,
                "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.",
                reply_markup=create_level_navigation_keyboard(MAX_LEVEL)
            )
            return
        # –°–æ–∑–¥–∞–µ–º –¥–æ–Ω–∞—Ç –¥–ª—è –¢–ï–ö–£–©–ï–ì–û —É—Ä–æ–≤–Ω—è
        payment_url = create_payment(message.from_user.id, current_level)

        if payment_url:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton(
                text="–û–ø–ª–∞—Ç–∏—Ç—å",
                url=payment_url
            ))

            bot.send_message(
                message.chat.id,
                f"–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å ({current_level + 1}) —Å–¥–µ–ª–∞–π—Ç–µ –¥–æ–Ω–∞—Ç:",
                reply_markup=keyboard
            )

            check_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            check_keyboard.add(types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"))
            check_keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
            bot.send_message(
                message.chat.id,
                "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å'",
                reply_markup=check_keyboard
            )
        else:
            bot.send_message(
                message.chat.id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_back_keyboard()
            )

    except Exception as e:
        logger.error(f"Error in handle_donation_selection: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.DONATION_TASK)
def check_donation_status(message):
    try:
        user_id = message.from_user.id
        user = user_repo.get_user(user_id)
        current_level = user.get('current_level', 1)
        logger.info(f"[Donation] Checking status for user {user_id}, level {current_level}")

        donation = donation_repo.get_last_donation(user_id, current_level)
        logger.info(f"[Donation] Last donation record: {donation}")

        if not donation:
            logger.warning(f"[Donation] No donation found for user {user_id}")
            bot.send_message(
                message.chat.id,
                "‚ùå –î–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
                reply_markup=create_back_keyboard()
            )
            return

        payment_id = donation.get('payment_id')
        if not payment_id:
            logger.error(f"[Donation] No payment_id in donation record for user {user_id}")
            bot.send_message(
                message.chat.id,
                "‚ùå –û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞—Ç–µ–∂ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=create_back_keyboard()
            )
            return

        try:
            logger.info(f"[Donation] Fetching payment info for payment_id: {payment_id}")
            payment_info = Payment.find_one(payment_id)
            logger.info(f"[Donation] Payment status: {payment_info.status}")

            # –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
            if payment_info.status != 'succeeded':
                bot.send_message(
                    message.chat.id,
                    f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {payment_info.status}",
                    reply_markup=create_back_keyboard()
                )
                return

        except Exception as e:
            logger.error(f"[Donation] Error getting payment info: {e}")
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_back_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        if donation.get('processed', False):
            logger.info(f"[Donation] Donation already processed for user {user_id}")
            bot.send_message(
                message.chat.id,
                "‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ.",
                reply_markup=create_level_navigation_keyboard(
                    current_level + 1,
                    user_id=user_id,
                    task_repo=task_repo
                )
            )
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–Ω–∞—Ç–∞
        donation_updated = donation_repo.update_donation_status(
            donation_id=donation['id'],
            status='succeeded',
            payment_id=payment_id,
            processed=True
        )
        logger.info(f"[Donation] Donation update result: {donation_updated}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        if not task_repo.is_task_completed(user_id, current_level, 'donation'):
            logger.info(f"[Donation] Creating and completing donation task...")
            task_created = task_repo.create_task(
                user_id=user_id,
                level=current_level,
                task_type='donation',
                start_time=datetime.now(),
                end_time=datetime.now(),
                completed=True
            )
            if not task_created:
                logger.error(f"[Donation] Failed to create task for user {user_id}")
                bot.send_message(
                    message.chat.id,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=create_back_keyboard()
                )
                return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        next_level = current_level + 1
        if next_level <= MAX_LEVEL:
            if not user_repo.update_user_level(user_id, next_level):
                logger.error(f"[Donation] Failed to update user level to {next_level}")
                bot.send_message(
                    message.chat.id,
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=create_back_keyboard()
                )
                return

            logger.info(f"[Donation] User level updated to {next_level}")
            show_level_content(message, next_level)

            bot.send_message(
                message.chat.id,
                f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω {next_level} —É—Ä–æ–≤–µ–Ω—å.",
                reply_markup=create_level_navigation_keyboard(next_level, user_id, task_repo)
            )
        else:
            show_final_level_message(message)

        user_repo.set_user_state(user_id, BotStates.LEVEL_CONTENT)

    except Exception as e:
        logger.error(f"[Donation] Error in check_donation_status: {str(e)}", exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=create_back_keyboard()
        )


@bot.message_handler(func=lambda message: message.text == "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å" and
                                          user_repo.get_user_state(message.from_user.id)
                                          in [BotStates.LEVEL_CONTENT, BotStates.TASK_SELECTION])
def handle_next_level_button(message):
    try:
        user_id = message.from_user.id
        logger.info(f"[Next Level] Button pressed by user {user_id}")

        user = user_repo.get_user(user_id)
        current_level = user.get('current_level', 1)
        logger.info(f"[Next Level] Current level: {current_level}")

        is_completed = task_repo.is_task_completed(user_id, current_level)
        logger.info(f"[Next Level] Task completed status: {is_completed}")

        if is_completed:
            next_level = current_level + 1
            logger.info(f"[Next Level] Preparing to move to level {next_level}")

            if next_level <= MAX_LEVEL:
                update_success = user_repo.update_user_level(user_id, next_level)
                logger.info(f"[Next Level] Level update result: {update_success}")

                if update_success:
                    show_level_content(message, next_level)
                else:
                    bot.reply_to(message, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è.")
            else:
                show_final_level_message(message)
        else:
            logger.info("[Next Level] Task not completed, showing details")
            show_task_status_details(message, current_level)

    except Exception as e:
        logger.error(f"[Next Level] Error: {str(e)}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def show_task_status_details(message, current_level):
    try:
        user_id = message.from_user.id
        status_messages = []

        active_time_task = task_repo.get_active_time_task(user_id, current_level)
        completed_time_task = task_repo.is_task_completed(user_id, current_level, 'time')

        if active_time_task:
            end_time = active_time_task['start_time'] + TASK_DURATION
            time_left = end_time - datetime.now()
            if time_left.total_seconds() > 0:
                hours = int(time_left.total_seconds() // 3600)
                minutes = int((time_left.total_seconds() % 3600) // 60)
                status_messages.append(f"‚è≥ –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è: –æ—Å—Ç–∞–ª–æ—Å—å {hours}—á {minutes}–º–∏–Ω")
        elif not completed_time_task:
            status_messages.append("‚è± –ó–∞–¥–∞–Ω–∏–µ '–í—Ä–µ–º—è' –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")

        referral_status = referral_repo.get_referral_status(user_id, current_level)
        completed_referral_task = task_repo.is_task_completed(user_id, current_level, 'referral')

        if not completed_referral_task:
            status_messages.append(f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –¥—Ä—É–∑–µ–π: {referral_status['completed_referrals']}/{1}")

        last_donation = donation_repo.get_last_donation(user_id, current_level)
        completed_donation_task = task_repo.is_task_completed(user_id, current_level, 'donation')

        if not completed_donation_task:
            if last_donation and last_donation['status'] == 'pending':
                status_messages.append("üí≥ –î–æ–Ω–∞—Ç: –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")
            else:
                status_messages.append("üí≥ –î–æ–Ω–∞—Ç: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")

        response = (
                "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –õ–Æ–ë–û–ï –∏–∑ –∑–∞–¥–∞–Ω–∏–π:\n\n" +
                "\n".join(status_messages) +
                "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(
            types.KeyboardButton("–í—Ä–µ–º—è"),
            types.KeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞"),
            types.KeyboardButton("–î–æ–Ω–∞—Ç")
        )
        keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))

        bot.send_message(
            message.chat.id,
            response,
            reply_markup=keyboard
        )
        user_repo.set_user_state(user_id, BotStates.TASK_SELECTION)

    except Exception as e:
        logger.error(f"Error in show_task_status_details: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text.strip() in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–ù–∞–∑–∞–¥", "Back", "‚¨ÖÔ∏è –ö —É—Ä–æ–≤–Ω—è–º"])
def handle_back(message):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    try:
        user_id = message.from_user.id
        current_state = user_repo.get_user_state(user_id)
        logger.info(f"[Back] User {user_id} pressed back. Current state: {current_state}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        if current_state == BotStates.CHARITY_AMOUNT_INPUT:
            show_level_content(message, 21)  # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ 21 —É—Ä–æ–≤–µ–Ω—å
            return

        if current_state == BotStates.FAQ:
            show_level_content(message, 1)  # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ FAQ –Ω–∞ 1 —É—Ä–æ–≤–µ–Ω—å
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = user_repo.get_user(user_id)
        current_level = user.get('current_level', 1)
        viewed_level = user_data_repo.get_viewed_level(user_id) or current_level

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É—Ä–æ–≤–Ω—è–º–∏
        if current_state in [BotStates.LEVEL_CONTENT, BotStates.TASK_SELECTION,
                             BotStates.TIME_TASK, BotStates.REFERRAL_TASK,
                             BotStates.DONATION_TASK]:
            show_level_content(message, viewed_level)
        elif current_state == BotStates.FINAL_LEVEL:
            show_level_content(message, 21)  # –í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            show_main_menu(message)

    except Exception as e:
        logger.error(f"[Back] Error: {str(e)}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def show_main_menu(message):
    try:
        user_id = message.from_user.id
        logger.info(f"Showing main menu for user {user_id}")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        keyboard = create_main_menu_keyboard()
        if not keyboard or not isinstance(keyboard, types.ReplyKeyboardMarkup):
            logger.warning("Keyboard creation failed, using fallback")
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(types.KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"))
            keyboard.add(types.KeyboardButton("–û –±–æ—Ç–µ"))


        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if not user_repo.set_user_state(user_id, BotStates.MAIN_MENU):
            logger.error(f"Failed to update state for user {user_id}")

    except Exception as e:
        logger.error(f"Error in show_main_menu for user {user_id}: {str(e)}", exc_info=True)
        try:
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback
            bot.send_message(
                message.chat.id,
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                reply_markup=types.ReplyKeyboardMarkup(
                    resize_keyboard=True
                ).add(types.KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"))
            )
            user_repo.set_user_state(user_id, BotStates.MAIN_MENU)
        except:
            logger.critical("Complete failure in show_main_menu fallback")


@bot.message_handler(func=lambda message: "—É—Ä–æ–≤–µ–Ω—å" in message.text and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.LEVEL_CONTENT)
def handle_level_navigation(message):
    try:
        level_number = int(message.text.split()[0])
        show_level_content(message, level_number)
    except Exception as e:
        logger.error(f"Error in handle_level_navigation: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda message: message.text == "–°–æ–æ–±—â–µ—Å—Ç–≤–æ '–°–æ–∑–¥–∞—Ç–µ–ª–∏'" and
                                          user_repo.get_user_state(message.from_user.id) == BotStates.MAIN_MENU)
def handle_community_link(message):
    try:
        community_text = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∑–∞–∫—Ä—ã—Ç–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ '–°–æ–∑–¥–∞—Ç–µ–ª–∏'!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
            "- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏\n"
            "- –ü–æ–¥–¥–µ—Ä–∂–∫—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤\n"
            "- –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            "- –õ–∏—á–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:"
        )

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É",
            url="https://t.me/your_community_link"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        ))

        bot.send_message(
            message.chat.id,
            community_text,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in handle_community_link: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
CHARITY_AMOUNT_INPUT = 100


@bot.message_handler(func=lambda message: message.text == "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
def handle_charity(message):
    try:
        user_id = message.from_user.id
        user_repo.set_user_state(user_id, BotStates.CHARITY_AMOUNT_INPUT)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 12

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("21 —É—Ä–æ–≤–µ–Ω—å"))

        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è (–≤ —Ä—É–±–ª—è—Ö):",
            reply_markup=keyboard
        )

        bot.register_next_step_handler(msg, process_charity_amount_or_back)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_charity: {str(e)}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_level_navigation_keyboard(21, message.from_user.id, task_repo)
        )


def process_charity_amount(message):
    try:
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        try:
            amount = float(message.text.replace(',', '.'))
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        except ValueError:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 100.50)",
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("21 —É—Ä–æ–≤–µ–Ω—å")
            )
            return

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        payment_url = create_charity_payment(user_id, amount)

        if not payment_url:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_level_navigation_keyboard(21, user_id, task_repo)
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        bot.send_message(
            message.chat.id,
            f"üí≥ –°—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è: {amount:.2f} —Ä—É–±.\n\n"
            "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)
            )
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è"))
        markup.row(types.KeyboardButton("21 —É—Ä–æ–≤–µ–Ω—å"))

        bot.send_message(
            message.chat.id,
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è",
            reply_markup=markup
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_repo.set_user_state(user_id, BotStates.CHARITY_AMOUNT_INPUT)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_charity_amount: {str(e)}", exc_info=True)
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_level_navigation_keyboard(21, message.from_user.id, task_repo)
        )


def process_charity_amount_or_back(message):
    if message.text.strip() == "21 —É—Ä–æ–≤–µ–Ω—å":
        show_level_content(message, 21)
        return
    process_charity_amount(message)


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è")
def check_charity_status(message):
    try:
        user_id = message.from_user.id
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –¥–ª—è {user_id}")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_repo.set_user_state(user_id, BotStates.CHARITY_AMOUNT_INPUT)

        donation = donation_repo.get_last_donation(user_id, level=0)
        if not donation:
            bot.send_message(
                message.chat.id,
                "‚ùå –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=create_level_navigation_keyboard(21, user_id, task_repo)
            )
            return

        payment_id = donation.get('payment_id')
        if not payment_id:
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞",
                reply_markup=create_level_navigation_keyboard(21, user_id, task_repo)
            )
            return

        try:
            payment = Payment.find_one(payment_id)

            if payment.status == 'succeeded':
                donation_repo.update_donation_status(
                    donation_id=donation['id'],
                    status='succeeded',
                    payment_id=payment_id,
                    processed=True
                )

                bot.send_message(
                    message.chat.id,
                    "‚úÖ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                    reply_markup=create_level_navigation_keyboard(21, user_id, task_repo)
                )

            elif payment.status == 'pending':
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.row(types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è"))
                markup.row(types.KeyboardButton("21 —É—Ä–æ–≤–µ–Ω—å"))

                bot.send_message(
                    message.chat.id,
                    "‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
                    reply_markup=markup
                )

            else:
                bot.send_message(
                    message.chat.id,
                    f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status}",
                    reply_markup=create_level_navigation_keyboard(21, user_id, task_repo)
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            bot.send_message(
                message.chat.id,
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞",
                reply_markup=create_level_navigation_keyboard(21, user_id, task_repo)
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_charity_status: {str(e)}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_level_navigation_keyboard(21, message.from_user.id, task_repo)
        )


@bot.message_handler(func=lambda message: True)
def debug_all_messages(message):
    user_state = user_repo.get_user_state(message.from_user.id)
    logger.info(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.text}' | –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_state}")

    if message.text == "–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã":
        logger.info("DEBUG: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã'!")
        handle_rules(message)


def payment_poller():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥."""
    while True:
        try:
            pending_payments = donation_repo.get_pending_payments()
            processed_users = set()

            for payment in pending_payments:
                if payment['user_id'] in processed_users:
                    continue

                if donation_repo.is_donation_processed(payment['id']):
                    continue

                try:
                    payment_info = Payment.find_one(payment['payment_id'])

                    if payment_info.status == 'succeeded':
                        donation_repo.update_donation_status(
                            donation_id=payment['id'],
                            status='succeeded',
                            payment_id=payment['payment_id'],
                            processed=True
                        )

                        if payment['level'] == 0:  # –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                            try:
                                bot.send_message(
                                    payment['user_id'],
                                    "‚úÖ –ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                                    reply_markup=create_main_menu_keyboard()
                                )
                                user_repo.set_user_state(payment['user_id'], BotStates.MAIN_MENU)
                            except Exception as e:
                                logger.error(f"Can't notify user {payment['user_id']}: {e}")
                            processed_users.add(payment['user_id'])
                            continue

                        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                        task_repo.create_task(
                            user_id=payment['user_id'],
                            level=payment['level'],
                            task_type='donation',
                            start_time=datetime.now(),
                            end_time=datetime.now(),
                            completed=True
                        )

                        next_level = payment['level'] + 1
                        user_repo.update_user_level(payment['user_id'], next_level)
                        user_repo.set_user_state(payment['user_id'], BotStates.LEVEL_CONTENT)

                        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø—Ä–∞–≤–∏–ª–∞ —É—Ä–æ–≤–Ω—è
                        level_content = level_repo.get_level_content(next_level)
                        level_rules = level_repo.get_level_rules(next_level)
                        keyboard = create_level_navigation_keyboard(
                            next_level,
                            user_id=payment['user_id'],
                            task_repo=task_repo
                        )

                        if level_content:
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É—Ä–æ–≤–Ω—è
                            bot.send_message(
                                payment['user_id'],
                                level_content,
                                reply_markup=keyboard
                            )

                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
                            if level_rules and level_rules.startswith("image:"):
                                try:
                                    import os
                                    from pathlib import Path

                                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ –ë–î
                                    image_relative = level_rules.replace("image:", "").strip()

                                    # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                                    possible_paths = [
                                        Path(r"C:\projects\1bot_probuzhdenie\static\levels"),
                                        Path(r"C:\1bot_probuzhdenie\static\levels"),
                                        Path(r"C:\static\levels"),
                                        Path(r"C:\app\static\levels"),
                                        Path("/var/www/1bot_probuzhdenie/static/levels"),
                                        Path("/app/static/levels"),
                                        Path(
                                            __file__).resolve().parent.parent.parent / "1bot_probuzhdenie" / "static" / "levels",
                                        Path(__file__).resolve().parent.parent / "static" / "levels",
                                    ]

                                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É
                                    static_levels_dir = None
                                    for path in possible_paths:
                                        try:
                                            if path.exists():
                                                static_levels_dir = path
                                                break
                                        except Exception:
                                            continue

                                    if static_levels_dir:
                                        image_path = None
                                        extensions = ['', '.jpg', '.jpeg', '.png', '.gif']

                                        for ext in extensions:
                                            test_path = static_levels_dir / f"{image_relative}{ext}"
                                            if test_path.exists():
                                                image_path = test_path
                                                break

                                        if image_path:
                                            with open(image_path, 'rb') as photo:
                                                bot.send_photo(
                                                    payment['user_id'],
                                                    photo,
                                                    reply_markup=keyboard
                                                )
                                                logger.info(f"[Payment Poller] Sent image for level {next_level}")
                                except Exception as e:
                                    logger.error(f"[Payment Poller] Error sending image: {str(e)}")

                        bot.send_message(
                            payment['user_id'],
                            f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω {next_level} —É—Ä–æ–≤–µ–Ω—å.",
                            reply_markup=keyboard
                        )

                        processed_users.add(payment['user_id'])

                    elif payment_info.status == 'canceled':
                        donation_repo.update_donation_status(
                            donation_id=payment['id'],
                            status='canceled',
                            payment_id=payment['payment_id']
                        )

                except Exception as e:
                    logger.error(f"Error processing payment {payment['payment_id']}: {e}")

        except Exception as e:
            logger.error(f"Payment poller error: {e}")

        time.sleep(60)


def run_bot():
    logger.info("Starting bot...")
    logger.info("Testing database connection...")
    if not storage.test_connection():
        logger.error("Database connection failed")
        exit(1)
    logger.info("Database connection successful")

    payment_thread = threading.Thread(
        target=payment_poller,
        name="PaymentPoller",
        daemon=True
    )
    payment_thread.start()
    logger.info("Background payment poller started")

    while True:
        try:
            logger.info("Starting bot polling...")
            bot.polling(none_stop=True, timeout=60, long_polling_timeout=60)
        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
            break
        except Exception as e:
            logger.error(f"Bot crashed: {str(e)}", exc_info=True)
            time.sleep(5)
            continue
        finally:
            logger.info("Cleaning up resources...")
            storage.close()
            logger.info("Storage connection closed")
